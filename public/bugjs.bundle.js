!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=46)}([function(t,e){function n(t,e){if(!(this instanceof n))return new n(t,e);this.x=t||0,this.y=e||0}t.exports=n,n.fromArray=function(t){return new n(t[0]||0,t[1]||0)},n.fromObject=function(t){return new n(t.x||0,t.y||0)},n.prototype.addX=function(t){return this.x+=t.x,this},n.prototype.addY=function(t){return this.y+=t.y,this},n.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},n.prototype.addScalar=function(t){return this.x+=t,this.y+=t,this},n.prototype.addScalarX=function(t){return this.x+=t,this},n.prototype.addScalarY=function(t){return this.y+=t,this},n.prototype.subtractX=function(t){return this.x-=t.x,this},n.prototype.subtractY=function(t){return this.y-=t.y,this},n.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},n.prototype.subtractScalar=function(t){return this.x-=t,this.y-=t,this},n.prototype.subtractScalarX=function(t){return this.x-=t,this},n.prototype.subtractScalarY=function(t){return this.y-=t,this},n.prototype.divideX=function(t){return this.x/=t.x,this},n.prototype.divideY=function(t){return this.y/=t.y,this},n.prototype.divide=function(t){return this.x/=t.x,this.y/=t.y,this},n.prototype.divideScalar=function(t){return 0!==t?(this.x/=t,this.y/=t):(this.x=0,this.y=0),this},n.prototype.divideScalarX=function(t){return 0!==t?this.x/=t:this.x=0,this},n.prototype.divideScalarY=function(t){return 0!==t?this.y/=t:this.y=0,this},n.prototype.invertX=function(){return this.x*=-1,this},n.prototype.invertY=function(){return this.y*=-1,this},n.prototype.invert=function(){return this.invertX(),this.invertY(),this},n.prototype.multiplyX=function(t){return this.x*=t.x,this},n.prototype.multiplyY=function(t){return this.y*=t.y,this},n.prototype.multiply=function(t){return this.x*=t.x,this.y*=t.y,this},n.prototype.multiplyScalar=function(t){return this.x*=t,this.y*=t,this},n.prototype.multiplyScalarX=function(t){return this.x*=t,this},n.prototype.multiplyScalarY=function(t){return this.y*=t,this},n.prototype.normalize=function(){var t=this.length();return 0===t?(this.x=1,this.y=0):this.divide(n(t,t)),this},n.prototype.norm=n.prototype.normalize,n.prototype.limit=function(t,e){return Math.abs(this.x)>t&&(this.x*=e),Math.abs(this.y)>t&&(this.y*=e),this},n.prototype.randomize=function(t,e){return this.randomizeX(t,e),this.randomizeY(t,e),this},n.prototype.randomizeX=function(t,e){var n=Math.min(t.x,e.x),r=Math.max(t.x,e.x);return this.x=i(n,r),this},n.prototype.randomizeY=function(t,e){var n=Math.min(t.y,e.y),r=Math.max(t.y,e.y);return this.y=i(n,r),this},n.prototype.randomizeAny=function(t,e){return Math.round(Math.random())?this.randomizeX(t,e):this.randomizeY(t,e),this},n.prototype.unfloat=function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},n.prototype.toFixed=function(t){return void 0===t&&(t=8),this.x=this.x.toFixed(t),this.y=this.y.toFixed(t),this},n.prototype.mixX=function(t,e){return void 0===e&&(e=.5),this.x=(1-e)*this.x+e*t.x,this},n.prototype.mixY=function(t,e){return void 0===e&&(e=.5),this.y=(1-e)*this.y+e*t.y,this},n.prototype.mix=function(t,e){return this.mixX(t,e),this.mixY(t,e),this},n.prototype.clone=function(){return new n(this.x,this.y)},n.prototype.copyX=function(t){return this.x=t.x,this},n.prototype.copyY=function(t){return this.y=t.y,this},n.prototype.copy=function(t){return this.copyX(t),this.copyY(t),this},n.prototype.zero=function(){return this.x=this.y=0,this},n.prototype.dot=function(t){return this.x*t.x+this.y*t.y},n.prototype.cross=function(t){return this.x*t.y-this.y*t.x},n.prototype.projectOnto=function(t){var e=(this.x*t.x+this.y*t.y)/(t.x*t.x+t.y*t.y);return this.x=e*t.x,this.y=e*t.y,this},n.prototype.horizontalAngle=function(){return Math.atan2(this.y,this.x)},n.prototype.horizontalAngleDeg=function(){return o(this.horizontalAngle())},n.prototype.verticalAngle=function(){return Math.atan2(this.x,this.y)},n.prototype.verticalAngleDeg=function(){return o(this.verticalAngle())},n.prototype.angle=n.prototype.horizontalAngle,n.prototype.angleDeg=n.prototype.horizontalAngleDeg,n.prototype.direction=n.prototype.horizontalAngle,n.prototype.rotate=function(t){var e=this.x*Math.cos(t)-this.y*Math.sin(t),n=this.x*Math.sin(t)+this.y*Math.cos(t);return this.x=e,this.y=n,this},n.prototype.rotateDeg=function(t){return t=u(t),this.rotate(t)},n.prototype.rotateTo=function(t){return this.rotate(t-this.angle())},n.prototype.rotateToDeg=function(t){return t=u(t),this.rotateTo(t)},n.prototype.rotateBy=function(t){var e=this.angle()+t;return this.rotate(e)},n.prototype.rotateByDeg=function(t){return t=u(t),this.rotateBy(t)},n.prototype.distanceX=function(t){return this.x-t.x},n.prototype.absDistanceX=function(t){return Math.abs(this.distanceX(t))},n.prototype.distanceY=function(t){return this.y-t.y},n.prototype.absDistanceY=function(t){return Math.abs(this.distanceY(t))},n.prototype.distance=function(t){return Math.sqrt(this.distanceSq(t))},n.prototype.distanceSq=function(t){var e=this.distanceX(t),n=this.distanceY(t);return e*e+n*n},n.prototype.length=function(){return Math.sqrt(this.lengthSq())},n.prototype.lengthSq=function(){return this.x*this.x+this.y*this.y},n.prototype.magnitude=n.prototype.length,n.prototype.isZero=function(){return 0===this.x&&0===this.y},n.prototype.isEqualTo=function(t){return this.x===t.x&&this.y===t.y},n.prototype.toString=function(){return"x:"+this.x+", y:"+this.y},n.prototype.toArray=function(){return[this.x,this.y]},n.prototype.toObject=function(){return{x:this.x,y:this.y}};var r=180/Math.PI;function i(t,e){return Math.floor(Math.random()*(e-t+1)+t)}function o(t){return t*r}function u(t){return t/r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.vectorEquals=function(t,e,n){void 0===n&&(n=!0);var r=t.x===e.x&&t.y===e.y;return!r&&n&&(console.log("Testing for vector equality but failed."),console.log(t),console.log(e)),r},e.randInt=function(t,e){return Math.floor(Math.random()*(e-t)+t+.49)},e.randBool=function(){return 1===e.randInt(0,1)},e.range=function(t,e){return Math.floor(Math.random()*e)+t-e/2},e.rangeDecimal=function(t,n,r){var i=Math.pow(10,r);return e.range(t*i,n*i)/i},e.multi=function(t,e){return function(){for(var n=0;n<t-1;n++)e(n);return e(t-1)}},e.randFromNormalDist=function(){for(var t=0,n=0;0===t;)t=Math.random();for(;0===n;)n=Math.random();var r=Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*n);return(r=r/10+.5)>1||r<0?e.randFromNormalDist():r},e.normalRange=function(t,n){var r=(n-t)*e.randFromNormalDist()+t;return window.DEBUG&&console.log(r),Math.floor(r)}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(0)),o=n(31),u=n(6),s=n(8),c=n(15),a=n(1),h=function(){function t(t,e){var n=this;this.updateSpeed=4,this.zIndexChanged=new o.Subject,this.behaviorQueue=[],this.queueBehavior=function(t){n.behaviorQueue.unshift(t)},this.id=t||0,Object.assign(this,{pos:new i.default(0,0),size:new i.default(30,20),direction:new i.default(1,0),speed:1,behaviorQueue:[],spontaneous:function(){return!1}},e),this.queueBehavior(new s.Pause(this,a.randInt(25,40)))}return t.prototype.update=function(t){if(void 0===t&&(t=[]),this.spontaneous()&&this.queueBehavior(new u.TurnAround(this)),this.behaviorQueue&&this.behaviorQueue.length>0)this.behaviorQueue[0].do(t);else{var e=this.getNextBehavior();e.do(t),this.queueBehavior(e)}return this},t.prototype.getNextBehavior=function(){return a.randBool()?new s.Pause(this,a.randInt(20,40)):new c.GroundWalk(this,a.normalRange(60,140))},t.prototype.finishBehavior=function(){this.behaviorQueue.shift()},t}();e.default=h},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t){this.bug=t}}();e.BugBehavior=r},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(0)),o=n(16),u=function(){return function(t,e){var n=this;this.updateSpeed=4,this.getAbsolutePos=function(t,e,r){if(!e&&!r){var i=n.getAbsolutePos(t,n.pos.clone(),n.graph);if(i)return i;throw new Error("Couldn't find branch in tree while calculating position")}if(r===t)return e;var o=r.left&&n.getAbsolutePos(t,e.clone().add(r.node),r.left);if(o)return o;var u=r.right&&n.getAbsolutePos(t,e.clone().add(r.node),r.right);return u||void 0},this.update=function(t){n.graph.update()},this.id=t||0,Object.assign(this,{pos:new i.default(1,0),size:new i.default(1,1),direction:new i.default(1,0),graph:new o.TreeStruct},e)}}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fixY=function(t,e){return t.canvas.height-e},e.clearCanvas=function(t){t.canvas,t.clearRect(0,0,t.canvas.width,t.canvas.height),t.rect(0,0,t.canvas.width,t.canvas.height),t.beginPath()},e.circle=function(t,e){t.beginPath(),t.fillStyle="rgb(0, 0, 255)",t.arc(0,0,e,0,2*Math.PI,!1),t.fill()}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e){return t.call(this,e)||this}return i(e,t),e.prototype.do=function(){var t=this.bug,e=t.direction.clone().norm().multiplyScalar(t.size.x+1);t.pos.subtract(e),t.direction.multiplyScalar(-1),t.finishBehavior()},e}(n(3).BugBehavior);e.TurnAround=o},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(0)),o=function(){function t(t,e){this.id=0,this.id=t||0,Object.assign(this,{pos:new i.default(0,0),size:new i.default(10,50)},e)}return t.prototype.update=function(){},t}();e.default=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,n){var r=t.call(this,e)||this;return r.countdown=n,r}return i(e,t),e.prototype.do=function(){this.countdown--,0==this.countdown&&this.bug.finishBehavior()},e}(n(3).BugBehavior);e.Pause=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.walk=function(t){var e=t.direction,n=t.speed,r=t.pos;r.addScalarX(e.x*n),r.addScalarY(e.y*n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=0;e.generateId=function(){return r++},e.maxId=function(){return r}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=n(1),o=function(){return function(t,e,n,o){void 0===t&&(t=1),void 0===n&&(n=5),this.update=function(){},this.depth=t,this.parent=e,this.maxDepth=n,this.node=new r(0,160),this.node.rotateByDeg(o||i.normalRange(-30,-150))}}();e.PlantagoStruct=o},,function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(14)),o=r(n(7)),u=n(10),s=r(n(0)),c=function(){function t(t){var e=this;this.isPaused=!1,this.frame=0,this.update=function(){e.isPaused||e.entityUpdater.update()},this.gameUI=t.gameUI,this.entityManager=t.entityManager,this.height=t.height,this.width=t.width,this.entityUpdater=new i.default(t.entityManager),this.createInitialGameState()}return t.prototype.start=function(){setInterval(this.update,17),this.gameUI.start()},t.prototype.addEntity=function(t){this.entityManager.addEntity(t)},t.prototype.togglePause=function(){this.isPaused=!this.isPaused,this.gameUI.togglePause(),this.isPaused&&window.DEBUG&&console.log(this.entityManager.getEntities())},t.prototype.createInitialGameState=function(){this.entityManager.addEntity(new o.default(u.generateId(),{pos:new s.default(-10,0),size:new s.default(10,this.height)})),this.entityManager.addEntity(new o.default(u.generateId(),{pos:new s.default(this.width,0),size:new s.default(10,this.height)}))},t}();e.GameEngine=c},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(2)),o=function(){function t(t){var e=this;this.entityManager=t,this.frame=0,this.getCollisions=function(t,n){var r=[];return n.forEach(function(n){e.isIntersecting(t,n)&&r.push(n)}),r},this.isIntersecting=function(t,e){var n,r;t instanceof i.default&&t.direction.x>0&&(n=t.pos.clone().subtractScalarX(t.size.x-1)),e instanceof i.default&&e.direction.x>0&&(r=e.pos.clone().subtractScalarX(e.size.x-1));var o=n||t.pos,u=t.size,s=r||e.pos,c=e.size;return e!==t&&s.x<o.x+u.x&&s.x+c.x>o.x&&s.y<o.y+u.y&&c.y+s.y>o.y}}return t.prototype.update=function(){this.updateAllEntities(),this.frame=this.frame+1},t.prototype.updateAllEntities=function(){var t=this,e=this.entityManager.getEntities();e.forEach(function(n){0!==n.updateSpeed&&t.frame%n.updateSpeed==0&&n.update(t.getCollisions(n,e))})},t}();e.default=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var u=n(3),s=n(9),c=o(n(4)),a=n(6),h=n(0),f=n(17),l=o(n(7)),p=function(t){function e(e,n){void 0===n&&(n=1);var r=t.call(this,e)||this;return r.countdown=n,r}return i(e,t),e.prototype.do=function(t){if(t.find(function(t){return t instanceof c.default})){var e=t.find(function(t){return t instanceof c.default});d(this.bug,e)}else t&&t.find(function(t){return t instanceof l.default})?new a.TurnAround(this.bug).do():s.walk(this.bug);this.countDown()},e.prototype.countDown=function(){this.countdown--,0==this.countdown&&this.bug.finishBehavior()},e}(u.BugBehavior);e.GroundWalk=p;var d=function(t,e){t.direction=e.graph.node.clone().norm(),t.pos=new h(e.pos.x,0).add(t.direction.clone().multiplyScalar(t.size.x)),t.climbingOn={plant:e,branch:e.graph},t.zIndexChanged.next(),t.finishBehavior(),t.queueBehavior(new f.Climb(t))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){return function t(e,n,i){var s=this;void 0===e&&(e=1),void 0===i&&(i=6),this.parent=null,this.left=null,this.right=null,this.node=new r(0,1),this.depth=0,this.update=function(){var e=(s.maxSize-s.node.y*Math.pow(s.depth,s.growthFactor))/100;s.maxSize-s.node.y<s.maxSize/100||(s.node.addScalarY(Math.sin(s.node.direction())*e),s.node.addScalarX(Math.cos(s.node.direction())*e),null==s.left&&null==s.right&&s.node.magnitude()>s.branchFactor&&s.depth<6&&(s.left=new t(s.depth+1,s),s.left.node.rotateDeg(s.node.direction()+s.branchAngle),s.right=new t(s.depth+1,s),s.right.node.rotateDeg(s.node.direction()-s.branchAngle)),s.updateLeft(),s.updateRight())},this.updateLeft=function(){return s.left&&s.left.update()},this.updateRight=function(){return s.right&&s.right.update()},this.depth=e,this.maxDepth=i,this.maxSize=o(80,5),this.branchFactor=o(10,10),this.branchAngle=o(60,25),this.growthFactor=u(1.2,.2,1),this.parent=n}}();e.TreeStruct=i;var o=function(t,e){return Math.floor(Math.random()*e)+t-e/2},u=function(t,e,n){var r=Math.pow(10,n);return o(t*r,e*r)/r}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),u=n(9),s=n(1),c=n(0),a=n(6),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.do=function(){var t=this.bug,e=t.climbingOn.branch,n=t.climbingOn.plant.getAbsolutePos(e),r=t.pos.clone().subtract(n);if(Math.abs(e.node.direction()-t.direction.direction())>3)Math.abs(r.direction()-e.node.direction())>.3&&(e.parent?(t.climbingOn.branch=e.parent,t.pos=t.climbingOn.plant.getAbsolutePos(t.climbingOn.branch).add(t.climbingOn.branch.node),t.direction=t.climbingOn.branch.node.clone().norm().multiplyScalar(-1)):l(t));else if(r.magnitude()>=e.node.magnitude()){var i=s.randBool()&&e.left?e.left:e.right?e.right:void 0;i?p(t,i):t.queueBehavior(new a.TurnAround(t))}u.walk(t)},e}(o.BugBehavior);e.Climb=h,e.beginClimbing=function(t,e){t.direction=e.graph.node.clone().norm(),t.pos=new c(e.pos.x,0).add(t.direction.clone().multiplyScalar(t.size.x)),t.climbingOn={plant:e,branch:e.graph},t.zIndexChanged.next()};var f,l=function(t){t.direction=new c(s.randBool()?1:-1,0);var e=t.direction.x>0?t.size.x+1:-(t.size.x+1),n=t.climbingOn.plant.pos.x+e;t.pos=new c(n,t.climbingOn.plant.pos.y),t.climbingOn=void 0,t.zIndexChanged.next(),t.finishBehavior()},p=function(t,e,n){var r;void 0===n&&(n=f.UP),r=n===f.UP?new c(t.size.x/3,0).rotate(e.node.direction()):e.node,t.climbingOn.branch=e,t.pos=t.climbingOn.plant.getAbsolutePos(e).add(r),t.direction=e.node.clone().norm().multiplyScalar(n===f.UP?1:-1)};!function(t){t[t.UP=0]="UP",t[t.DOWN=1]="DOWN"}(f||(f={}))},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(2)),o=r(n(4)),u=function(){return function(t){var e=this;this.entities=[],this.getEntities=function(){return e.entities},this.addEntity=function(t){e.entities.push(t),t instanceof i.default&&t.zIndexChanged.subscribe(e.sortEntities())},this.sortEntities=function(){return function(){var t=e.entities.filter(function(t){return t instanceof o.default}).map(function(t){return[t]});e.entities.filter(function(t){return t instanceof i.default&&t.climbingOn}).forEach(function(e){var n=t.findIndex(function(t){return t[0]===e.climbingOn.plant});t[n].push(e)});var n=e.entities.filter(function(t){return!(t instanceof o.default||t instanceof i.default&&t.climbingOn)}).map(function(t){return[t]});e.entities=e.flatten(t.concat(n).sort(function(t,e){return t[0].id-e[0].id})),window.DEBUG&&console.log(e.entities)}},this.flatten=function(t){return t.reduce(function(t,n){return t.concat(Array.isArray(n)?e.flatten(n):n)},[])},t.forEach(this.addEntity)}}();e.default=u},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(4)),o=r(n(2)),u=r(n(20)),s=r(n(24)),c=r(n(7)),a=n(26),h=n(5),f=function(){function t(t,e){var n=this;this.target=t,this.entityManager=e,this.isPaused=!1,this.frame=0,this.start=function(){var t=n.createCanvas();n.ctx=t.getContext("2d"),n.beginLoop=n.beginLoop.bind(n),n.beginLoop(0)},this.render=function(){h.clearCanvas(n.ctx),n.entityManager.getEntities().forEach(function(t){n.renderEntity(t,n.ctx)})},this.togglePause=function(){n.isPaused=!n.isPaused}}return t.prototype.beginLoop=function(t){this.isPaused||this.render(),window.requestAnimationFrame(this.beginLoop)},t.prototype.createCanvas=function(){var t=document.querySelector(this.target),e=document.createElement("canvas");return e.height=t.clientHeight,e.width=t.clientWidth,t.appendChild(e),e},t.prototype.renderEntity=function(t,e){t instanceof o.default?u.default(t,e):t instanceof c.default?a.wallRenderer(t,e):t instanceof i.default&&s.default(t,e)},t}();e.default=f},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(21)),o=n(5),u=n(0),s=[],c=function(t){return s[t.id]||function(t){var e=new i.default(t.id,t);return s[t.id]=e,e}(t)};e.default=function(t,e){var n=c(t);n.update();var r=t.climbingOn?3:0,i=t.direction,s=t.size,a=new u(t.pos.x,o.fixY(e,t.pos.y));if(e.save(),e.translate(a.x,a.y),window.DEBUG&&o.circle(e,5),i.x>0)e.rotate(-i.angle()),e.scale(-1,1);else{var h=i.clone().multiplyScalarX(-1);e.rotate(h.angle())}e.drawImage(n.getImage(),0,-s.y+r,s.x,s.y),e.restore()}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),i=n(8),o=function(){function t(t,e){this.id=t,this.bug=e,this.frame=0,this.imageIdx=0,this.randomOffset=r.randInt(0,15)}return t.prototype.getImage=function(){return t.images[this.imageIdx]},t.prototype.update=function(){!this.bug.behaviorQueue[0]||this.bug.behaviorQueue[0]instanceof i.Pause||(this.frame+++this.randomOffset)%15==0&&(this.imageIdx=(this.imageIdx+1)%2)},t.getBugImages=function(){var t=n(22),e=n(23),r=[new Image,new Image];return r[0].src=t,r[1].src=e,r},t.images=t.getBugImages(),t}();e.default=o},function(t,e,n){t.exports=n.p+"298529481724a92ace801b209398c33f.png"},function(t,e,n){t.exports=n.p+"97eb36295e4099d3ad0525295eec54bd.png"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5),i=n(11),o=n(25),u=new Image;u.src=o;var s=[];e.default=function(t,e){if(s[t.id])a(t,e);else{var n=new OffscreenCanvas(e.canvas.width,e.canvas.height);s[t.id]=n,c(t,n.getContext("2d"))}};var c=function(t,e){var n=t.pos;e.save(),e.strokeStyle="#a56a27",e.lineWidth=10,e.translate(n.x,r.fixY(e,n.y)),h(t.graph,e),e.restore()},a=function(t,e){var n=s[t.id];e.drawImage(n,0,0,e.canvas.width,e.canvas.height)},h=function(t,e){t instanceof i.PlantagoStruct?l(t,e):f(t,e)},f=function(t,e){var n=Math.floor(t.node.x),r=Math.floor(t.node.y);e.moveTo(0,0),e.lineTo(n,-r),e.stroke(),e.save(),e.translate(n,-r),t.left&&h(t.left,e),t.right&&h(t.right,e),e.restore()},l=function(t,e){var n=Math.floor(t.node.x),r=Math.floor(t.node.y);e.save(),window.DEBUG&&(e.moveTo(0,0),e.lineTo(n,-r),e.stroke()),e.rotate(-t.node.angle()+Math.PI/2),e.drawImage(u,-24,-173,42,178),e.restore()}},function(t,e,n){t.exports=n.p+"b207d35b8b05f0dc8471df08fd33e627.png"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(5);e.wallRenderer=function(t,e){var n=t.pos,i=t.size;e.save(),e.translate(n.x,r.fixY(e,n.y)),e.translate(0,-i.y),e.fillRect(0,0,i.x,i.y),e.restore()}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(2)),o=n(0),u=n(1),s=function(){function t(t,e,n){this.generateId=t,this.spontaneous=e,this.width=n}return t.prototype.build=function(t){var e=Object.assign({spontaneous:this.spontaneous,direction:u.randBool()?new o(1,0):new o(-1,0),pos:this.randomX()},t);return new i.default(this.generateId(),e)},t.prototype.randomX=function(){return new o(Math.floor(Math.random()*this.width-40),0)},t}();e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){var n=this;this.signal=!1,this.requestsToWait=0,this.get=function(){return n.signal&&0===n.requestsToWait?(n.signal=!1,!0):(n.requestsToWait>0&&n.requestsToWait--,!1)};var r=function(){setTimeout(function(){n.signal=!0,n.requestsToWait=e(),r()},t())};r()}}();e.default=r},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=r(n(4)),o=n(30),u=r(n(0)),s=n(1),c=function(){function t(t,e,n){this.generateId=t,this.spontaneous=e,this.width=n,this.plantPosCursor=this.randomX()}return t.prototype.build=function(t){var e=Object.assign({spontaneous:this.spontaneous,graph:new o.PlantagoBushStruct,pos:this.getNextPos()},t);return new i.default(this.generateId(),e)},t.prototype.getNextPos=function(){return this.plantPosCursor.x=(this.plantPosCursor.x+s.randInt(this.width/2,this.width/3))%this.width,this.plantPosCursor.clone()},t.prototype.randomX=function(){return new u.default(Math.floor(Math.random()*this.width-40),0)},t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=n(11),o=n(1),u=function(){return function t(e,n,u,s,c,a){var h=this;void 0===e&&(e=1),void 0===n&&(n=null),void 0===u&&(u=4),void 0===s&&(s=!1),void 0===c&&(c=0),void 0===a&&(a=40),this.depth=e,this.parent=n,this.maxDepth=u,this.flip=s,this.angle=c,this.nodeLength=a,this.branch=function(){return new t(h.depth+1,h,h.maxDepth,!h.flip,h.angle,h.nodeLength)},this.leaf=function(){return new i.PlantagoStruct(h.depth+1,h,h.maxDepth,(h.flip?-30:-160)+o.randInt(-15,15)+h.angle)},this.update=function(){},1==e&&(this.flip=o.randBool(),this.maxDepth=o.randInt(5,10),this.angle=o.normalRange(-15,15),this.nodeLength=o.normalRange(30,60)),this.node=new r(0,1).multiplyScalar(this.nodeLength),this.node.rotateByDeg((this.flip?-80:-100)+this.angle),e<u?(this.left=this.flip?this.branch():this.leaf(),this.right=this.flip?this.leaf():this.branch()):this.left=this.leaf()}}();e.PlantagoBushStruct=u},function(t,e,n){"use strict";n.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var u=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;u=t},get useDeprecatedSynchronousErrorHandling(){return u}};function c(t){setTimeout(function(){throw t},0)}var a={closed:!0,next:function(t){},error:function(t){if(s.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},h=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function f(t){return null!==t&&"object"==typeof t}var l=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),p=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var u=0;u<n.length;++u){n[u].remove(this)}if(o(r))try{r.call(this)}catch(t){e=t instanceof l?d(t.errors):[t]}if(h(i)){u=-1;for(var s=i.length;++u<s;){var c=i[u];if(f(c))try{c.unsubscribe()}catch(t){e=e||[],t instanceof l?e=e.concat(d(t.errors)):e.push(t)}}}if(e)throw new l(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function d(t){return t.reduce(function(t,e){return t.concat(e instanceof l?e.errors:e)},[])}var y=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),v=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=a;break;case 1:if(!n){o.destination=a;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new b(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new b(o,n,r,i)}return o}return i(e,t),e.prototype[y]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(p),b=function(t){function e(e,n,r,i){var u,s=t.call(this)||this;s._parentSubscriber=e;var c=s;return o(n)?u=n:n&&(u=n.next,r=n.error,i=n.complete,n!==a&&(o((c=Object.create(n)).unsubscribe)&&s.add(c.unsubscribe.bind(c)),c.unsubscribe=s.unsubscribe.bind(s))),s._context=c,s._next=u,s._error=r,s._complete=i,s}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=s.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return s.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(v);function g(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof v?r:null}return!0}var m=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function w(){}function x(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return _(t)}function _(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:w}var S=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof v)return t;if(t[y])return t[y]()}return t||e||n?new v(t,e,n):new v(a)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||s.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),s.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){s.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),g(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=E(e))(function(e,r){var i;i=n.subscribe(function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}},r,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[m]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:_(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=E(t))(function(t,n){var r;e.subscribe(function(t){return r=t},function(t){return n(t)},function(){return t(r)})})},t.create=function(e){return new t(e)},t}();function E(t){if(t||(t=s.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var O=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),I=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(p),P=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i(e,t),e}(v),M=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[y]=function(){return new P(this)},e.prototype.lift=function(t){var e=new j(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new O;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new O;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new O;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new O;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new O;return this.hasError?(t.error(this.thrownError),p.EMPTY):this.isStopped?(t.complete(),p.EMPTY):(this.observers.push(t),new I(this,t))},e.prototype.asObservable=function(){var t=new S;return t.source=this,t},e.create=function(t,e){return new j(t,e)},e}(S),j=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):p.EMPTY},e}(M);var T=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new A(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),A=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(v),N=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new p).add(this.source.subscribe(new C(this.getSubject(),this))),t.closed&&(this._connection=null,t=p.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new T(t));var t},e}(S),C=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(P);var D=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return i(e,t),e.prototype._subscribe=function(t){var e=new p,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new k(n)),e.add(r.subscribe(t)),e},e}(S),k=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(p),B=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new O;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(M),z=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(p)),Y=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(z),F=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),q=function(t){function e(n,r){void 0===r&&(r=F.now);var i=t.call(this,n,function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()})||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(F),V=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(q))(Y),X=new S(function(t){return t.complete()});function U(t){return t?function(t){return new S(function(e){return t.schedule(function(){return e.complete()})})}(t):X}function R(t){return t&&"function"==typeof t.schedule}var L,W=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function G(t,e){return new S(function(n){var r=new p,i=0;return r.add(e.schedule(function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()})),r})}function H(t,e){return e?G(t,e):new S(W(t))}function Q(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return R(n)?(t.pop(),G(t,n)):H(t)}function J(t,e){return new S(e?function(n){return e.schedule(K,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function K(t){var e=t.error;t.subscriber.error(e)}L||(L={});var Z=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return Q(this.value);case"E":return J(this.error);case"C":return U()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var $=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return i(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new tt(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(Z.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(Z.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(Z.createComplete()),this.unsubscribe()},e}(v),tt=function(){return function(t,e){this.notification=t,this.destination=e}}(),et=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new nt(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new O;if(this.isStopped||this.hasError?e=p.EMPTY:(this.observers.push(t),e=new I(this,t)),i&&t.add(t=new $(t,i)),n)for(var u=0;u<o&&!t.closed;u++)t.next(r[u]);else for(u=0;u<o&&!t.closed;u++)t.next(r[u].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||V).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(M),nt=function(){return function(t,e){this.time=t,this.value=e}}(),rt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),p.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),p.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(M),it=1,ot=function(){return Promise.resolve()}(),ut={};function st(t){return t in ut&&(delete ut[t],!0)}var ct=function(t){var e=it++;return ut[e]=!0,ot.then(function(){return st(e)&&t()}),e},at=function(t){st(t)},ht=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=ct(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(at(n),e.scheduled=void 0)},e}(z),ft=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(q))(ht),lt=new q(z),pt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(z),dt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(q))(pt),yt=function(t){function e(e,n){void 0===e&&(e=vt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,function(){return r.frame})||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(q),vt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return i(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(z);function bt(t){return t}function gt(t){return!!t&&(t instanceof S||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var mt=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}(),wt=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}(),xt=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();function _t(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new St(t,e))}}var St=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Et(t,this.project,this.thisArg))},t}(),Et=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(v);function Ot(t,e,n){if(e){if(!R(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Ot(t,n).apply(void 0,r).pipe(_t(function(t){return h(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,o=this,u={context:o,subject:i,callbackFunc:t,scheduler:n};return new S(function(r){if(n){var s={args:e,subscriber:r,params:u};return n.schedule(It,0,s)}if(!i){i=new rt;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){g(i)?i.error(t):console.warn(t)}}return i.subscribe(r)})}}function It(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,u=i.context,s=i.scheduler,c=i.subject;if(!c){c=i.subject=new rt;try{o.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(s.schedule(Pt,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function Pt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Mt(t,e,n){if(e){if(!R(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Mt(t,n).apply(void 0,r).pipe(_t(function(t){return h(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new S(function(r){var o=i.context,u=i.subject;if(n)return n.schedule(jt,0,{params:i,subscriber:r,context:o});if(!u){u=i.subject=new rt;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?u.error(n):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){g(u)?u.error(t):console.warn(t)}}return u.subscribe(r)})}}function jt(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,u=n.args,s=n.scheduler,c=n.subject;if(!c){c=n.subject=new rt;try{o.apply(i,u.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(s.schedule(At,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(s.schedule(Tt,0,{value:i,subject:c}))}}]))}catch(t){this.add(s.schedule(At,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function Tt(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function At(t){var e=t.err;t.subject.error(e)}var Nt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(v),Ct=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(v);function Dt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var kt=Dt(),Bt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function zt(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var Yt=function(t){if(t&&"function"==typeof t[m])return r=t,function(t){var e=r[m]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Bt(t))return W(t);if(zt(t))return n=t,function(t){return n.then(function(e){t.closed||(t.next(e),t.complete())},function(e){return t.error(e)}).then(null,c),t};if(t&&"function"==typeof t[kt])return e=t,function(t){for(var n=e[kt]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add(function(){n.return&&n.return()}),t};var e,n,r,i=f(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Ft(t,e,n,r,i){if(void 0===i&&(i=new Ct(t,n,r)),!i.closed)return e instanceof S?e.subscribe(i):Yt(e)(i)}var qt={};function Vt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return R(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&h(t[0])&&(t=t[0]),H(t,r).lift(new Xt(n))}var Xt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Ut(t,this.resultSelector))},t}(),Ut=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(e,t),e.prototype._next=function(t){this.values.push(qt),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Ft(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,u=o[n],s=this.toRespond?u===qt?--this.toRespond:this.toRespond:0;o[n]=e,0===s&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Nt);function Rt(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[m]}(t))return function(t,e){return new S(function(n){var r=new p;return r.add(e.schedule(function(){var i=t[m]();r.add(i.subscribe({next:function(t){r.add(e.schedule(function(){return n.next(t)}))},error:function(t){r.add(e.schedule(function(){return n.error(t)}))},complete:function(){r.add(e.schedule(function(){return n.complete()}))}}))})),r})}(t,e);if(zt(t))return function(t,e){return new S(function(n){var r=new p;return r.add(e.schedule(function(){return t.then(function(t){r.add(e.schedule(function(){n.next(t),r.add(e.schedule(function(){return n.complete()}))}))},function(t){r.add(e.schedule(function(){return n.error(t)}))})})),r})}(t,e);if(Bt(t))return G(t,e);if(function(t){return t&&"function"==typeof t[kt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new S(function(n){var r,i=new p;return i.add(function(){r&&"function"==typeof r.return&&r.return()}),i.add(e.schedule(function(){r=t[kt](),i.add(e.schedule(function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}}))})),i})}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Lt(t,e){return e?Rt(t,e):t instanceof S?t:new S(Yt(t))}var Wt=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new Gt(t,this.project,this.concurrent))},t}(),Gt=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new Ct(this,e,n),i=this.destination;i.add(r);var o=Ft(this,t,void 0,void 0,r);o!==r&&i.add(o)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Nt);function Ht(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),function t(e,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof n?function(i){return i.pipe(t(function(t,r){return Lt(e(t,r)).pipe(_t(function(e,i){return n(t,e,r,i)}))},r))}:("number"==typeof n&&(r=n),function(t){return t.lift(new Wt(e,r))})}(bt,t)}function Qt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Ht(1)(Q.apply(void 0,t))}function Jt(t){return new S(function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Lt(n):U()).subscribe(e)})}function Kt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(h(n))return Zt(n,null);if(f(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return Zt(r.map(function(t){return n[t]}),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return Zt(t=1===t.length&&h(t[0])?t[0]:t,null).pipe(_t(function(t){return i.apply(void 0,t)}))}return Zt(t,null)}function Zt(t,e){return new S(function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,u=0,s=function(s){var c=Lt(t[s]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,u++),i[s]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(u===r&&n.next(e?e.reduce(function(t,e,n){return t[e]=i[n],t},{}):i),n.complete())}}))},c=0;c<r;c++)s(c);else n.complete()})}function $t(t,e,n,r){return o(n)&&(r=n,n=void 0),r?$t(t,e,n).pipe(_t(function(t){return h(t)?r.apply(void 0,t):r(t)})):new S(function(r){!function t(e,n,r,i,o){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var s=e;e.addEventListener(n,r,o),u=function(){return s.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),u=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var a=e;e.addListener(n,r),u=function(){return a.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var h=0,f=e.length;h<f;h++)t(e[h],n,r,i,o)}i.add(u)}(t,e,function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)},r,n)})}function te(t,e,n){return n?te(t,e).pipe(_t(function(t){return h(t)?n.apply(void 0,t):n(t)})):new S(function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(o(e))return function(){return e(i,r)}})}function ee(t,e,n,r,i){var o,u;if(1==arguments.length){var s=t;u=s.initialState,e=s.condition,n=s.iterate,o=s.resultSelector||bt,i=s.scheduler}else void 0===r||R(r)?(u=t,o=bt,i=r):(u=t,o=r);return new S(function(t){var r=u;if(i)return i.schedule(ne,0,{subscriber:t,iterate:n,condition:e,resultSelector:o,state:r});for(;;){if(e){var s=void 0;try{s=e(r)}catch(e){return void t.error(e)}if(!s){t.complete();break}}var c=void 0;try{c=o(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}})}function ne(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function re(t,e,n){return void 0===e&&(e=X),void 0===n&&(n=X),Jt(function(){return t()?e:n})}function ie(t){return!h(t)&&t-parseFloat(t)+1>=0}function oe(t,e){return void 0===t&&(t=0),void 0===e&&(e=lt),(!ie(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=lt),new S(function(n){return n.add(e.schedule(ue,t,{subscriber:n,counter:0,period:t})),n})}function ue(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function se(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,i=t[t.length-1];return R(i)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof i&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof S?t[0]:Ht(n)(H(t,r))}var ce=new S(w);function ae(){return ce}function he(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return X;var n=t[0],r=t.slice(1);return 1===t.length&&h(n)?he.apply(void 0,n):new S(function(t){var e=function(){return t.add(he.apply(void 0,r).subscribe(t))};return Lt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})})}function fe(t,e){return new S(e?function(n){var r=Object.keys(t),i=new p;return i.add(e.schedule(le,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function le(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var u=e[n];r.next([u,o[u]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function pe(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function de(t,e){return function(n){return n.lift(new ye(t,e))}}var ye=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new ve(t,this.predicate,this.thisArg))},t}(),ve=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(v);function be(t,e,n){return[de(e,n)(new S(Yt(t))),de(pe(e,n))(new S(Yt(t)))]}function ge(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!h(t[0]))return t[0];t=t[0]}return H(t,void 0).lift(new me)}var me=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new we(t))},t}(),we=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Ft(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var u=this.subscriptions[o];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(e)},e}(Nt);function xe(t,e,n){return void 0===t&&(t=0),new S(function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(_e,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}})}function _e(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Se(t,e,n){void 0===t&&(t=0);var r=-1;return ie(e)?r=Number(e)<1?1:Number(e):R(e)&&(n=e),R(n)||(n=lt),new S(function(e){var i=ie(t)?t:+t-n.now();return n.schedule(Ee,i,{index:0,period:r,subscriber:e})})}function Ee(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function Oe(t,e){return new S(function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Lt(i):X).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}})}function Ie(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),H(t,void 0).lift(new Pe(n))}var Pe=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Me(t,this.resultSelector))},t}(),Me=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return i(e,t),e.prototype._next=function(t){var e=this.iterators;h(t)?e.push(new Te(t)):"function"==typeof t[kt]?e.push(new je(t[kt]())):e.push(new Ae(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var u,s=(u=t[r]).next();if(u.hasCompleted()&&(i=!0),s.done)return void n.complete();o.push(s.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(v),je=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),Te=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[kt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),Ae=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(e,t),e.prototype[kt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Ft(this,this.observable,this,e)},e}(Nt);n.d(e,"Observable",function(){return S}),n.d(e,"ConnectableObservable",function(){return N}),n.d(e,"GroupedObservable",function(){return D}),n.d(e,"observable",function(){return m}),n.d(e,"Subject",function(){return M}),n.d(e,"BehaviorSubject",function(){return B}),n.d(e,"ReplaySubject",function(){return et}),n.d(e,"AsyncSubject",function(){return rt}),n.d(e,"asapScheduler",function(){return ft}),n.d(e,"asyncScheduler",function(){return lt}),n.d(e,"queueScheduler",function(){return V}),n.d(e,"animationFrameScheduler",function(){return dt}),n.d(e,"VirtualTimeScheduler",function(){return yt}),n.d(e,"VirtualAction",function(){return vt}),n.d(e,"Scheduler",function(){return F}),n.d(e,"Subscription",function(){return p}),n.d(e,"Subscriber",function(){return v}),n.d(e,"Notification",function(){return Z}),n.d(e,"NotificationKind",function(){return L}),n.d(e,"pipe",function(){return x}),n.d(e,"noop",function(){return w}),n.d(e,"identity",function(){return bt}),n.d(e,"isObservable",function(){return gt}),n.d(e,"ArgumentOutOfRangeError",function(){return mt}),n.d(e,"EmptyError",function(){return wt}),n.d(e,"ObjectUnsubscribedError",function(){return O}),n.d(e,"UnsubscriptionError",function(){return l}),n.d(e,"TimeoutError",function(){return xt}),n.d(e,"bindCallback",function(){return Ot}),n.d(e,"bindNodeCallback",function(){return Mt}),n.d(e,"combineLatest",function(){return Vt}),n.d(e,"concat",function(){return Qt}),n.d(e,"defer",function(){return Jt}),n.d(e,"empty",function(){return U}),n.d(e,"forkJoin",function(){return Kt}),n.d(e,"from",function(){return Lt}),n.d(e,"fromEvent",function(){return $t}),n.d(e,"fromEventPattern",function(){return te}),n.d(e,"generate",function(){return ee}),n.d(e,"iif",function(){return re}),n.d(e,"interval",function(){return oe}),n.d(e,"merge",function(){return se}),n.d(e,"never",function(){return ae}),n.d(e,"of",function(){return Q}),n.d(e,"onErrorResumeNext",function(){return he}),n.d(e,"pairs",function(){return fe}),n.d(e,"partition",function(){return be}),n.d(e,"race",function(){return ge}),n.d(e,"range",function(){return xe}),n.d(e,"throwError",function(){return J}),n.d(e,"timer",function(){return Se}),n.d(e,"using",function(){return Oe}),n.d(e,"zip",function(){return Ie}),n.d(e,"scheduled",function(){return Rt}),n.d(e,"EMPTY",function(){return X}),n.d(e,"NEVER",function(){return ce}),n.d(e,"config",function(){return s})},,,,,,,,,,,,,,,function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var i=n(13),o=r(n(19)),u=r(n(18)),s=r(n(28)),c=n(1),a=r(n(27)),h=n(10),f=r(n(29)),l=r(n(0)),p=new u.default([]),d=new s.default(function(){return c.range(8e3,4e3)},function(){return c.range(10,4)}).get;console.log(h.generateId),window.Game=function(t,e,n){return e=e||document.querySelector(t).clientHeight,n=n||document.querySelector(t).clientWidth,{game:new i.GameEngine({gameUI:new o.default(t,p),entityManager:p,height:e,width:n}),bugFactory:new a.default(h.generateId,d,n),plantFactory:new f.default(h.generateId,d,n)}},window.window,window.DEBUG=!1,window.Victor=l.default}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,